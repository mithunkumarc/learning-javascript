1.using object() constructor, creates an empty object

let person = new Object();
typeof(person);
>> "object"

*****************************************************************************************************************
2. One of easiest way to create a javascript object is object literal, 
simply define the property and values inside curly braces as shown below

let bike = {name: 'SuperSport', maker:'Ducati', engine:'937cc'};


# console :
bike
   engine : 937cc
   maker : Ducati
   name : SuperSport
>__proto__

__proto__ : 
__proto__ is the actual object that is used in the lookup chain to resolve methods. 
It is a property that all objects have. 
This is the property which is used by the JavaScript engine for inheritance. 
According to ECMA specifications it is supposed to be an internal property, 
however most vendors allow it to be accessed and modified.


adding function to object : 

bike.stop = function(){
	console.log('applying brake...');
}
bike.stop();

#output : applying brake...



*****************************************************************************************************************
3. Create JavaScript Object with Constructor
function Vehicle(name,maker){
	this.name = name;
	this.maker = maker;
}

let car1 = new Vehicle('Fiesta', 'Fort');
let car2 = new Vehicle('Santa Fe', "Hyundai");

console.log(car1.name);
console.log(car2.name);
>>output : 
Fiesta
Santa Fe

car1 : 
Vehicle {name: "Fiesta", maker: "Fort"}
maker:"Fort"
name:"Fiesta"
__proto__:Object
           ... 
Note : 

Every function, while executing has a reference to its current execution context called this (keyword).
The new keyword in front of any function turns the function call into constructor call.

*********************************************************************************************************************

4.Object.create() 
allowed to create object with more atrribute options like configurable, enumerable, writable and value as shown below

let cars = Object.create(Object.prototype,
{
	name:{
		value: 'Fiesta',
		configurable: true,
		writable: true,
		enumerable: false
    },
	maker:{
		value: 'Ford',
		configurable: true,
		writable: true,
		enumerable: true
    }
});
console.log(cars.name);
output : Fiesta


**********************************************************
add singleton pattern too
2.
important : 
https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47
https://medium.com/@ayusharma.in/objects-writable-configurable-enumerable-365cdff6a408
--------

https://coderwall.com/p/p5cf5w/different-ways-of-creating-an-object-in-javascript
https://hackernoon.com/create-objects-in-javascript-10924cfa9fc7

------------------------
https://coderwall.com/p/j1khtg/javascript-difference-between-__proto__-and-prototype

https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47
