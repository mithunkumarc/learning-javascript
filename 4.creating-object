1.usually object created from constructor function.
2.javascript creates a prototype object for every constructor function.
3.all the objector created using constructor function becomes subclass of constructor function's prototype object
4.all the other objects becomes subclass of Object.prototype except objects which are created like Object.create(null);

object.create(null); no parent object with no inherited properties.


*****************************************************************************************
ways to create object : 

1.using object() constructor, creates an empty object

let person = new Object();
typeof(person);
>> "object"

*****************************************************************************************************************
2. One of easiest way to create a javascript object is object literal, 
simply define the property and values inside curly braces as shown below

let bike = {name: 'SuperSport', maker:'Ducati', engine:'937cc'};


# console :
bike
   engine : 937cc
   maker : Ducati
   name : SuperSport
>__proto__

__proto__ : 
__proto__ is the actual object that is used in the lookup chain to resolve methods. 
It is a property that all objects have. 
This is the property which is used by the JavaScript engine for inheritance. 
According to ECMA specifications it is supposed to be an internal property, 
however most vendors allow it to be accessed and modified.


adding function to object : 

bike.stop = function(){
	console.log('applying brake...');
}
bike.stop();

#output : applying brake...



*****************************************************************************************************************
3. Create JavaScript Object with Constructor
function Vehicle(name,maker){
	this.name = name;
	this.maker = maker;
}

let car1 = new Vehicle('Fiesta', 'Fort');
let car2 = new Vehicle('Santa Fe', "Hyundai");

console.log(car1.name);
console.log(car2.name);
>>output : 
Fiesta
Santa Fe

car1 : 
Vehicle {name: "Fiesta", maker: "Fort"}
maker:"Fort"
name:"Fiesta"
__proto__:Object
           ... 
Note : 

Every function, while executing has a reference to its current execution context called this (keyword).
The new keyword in front of any function turns the function call into constructor call.

*********************************************************************************************************************

4.Object.create() 
allowed to create object with more atrribute options like configurable, enumerable, writable and value as shown below

/*cars becomes the new object with __proto__ is equal to Object.prototype, expand cars in console , cars become child
of object*/
let cars = Object.create(Object.prototype,
{
	name:{
		value: 'Fiesta',
		configurable: true,
		writable: true,
		enumerable: false
    },
	maker:{
		value: 'Ford',
		configurable: true,
		writable: true,
		enumerable: true
    }
});
console.log(cars.name);
output : Fiesta

____------------------------------------another example------------------------------------------______
The Object.create() method creates a new object, 
using an existing object to provide the newly created object's __proto__ .


const person = {
  isHuman: false,
  printIntroduction: function () {
    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
  }
};

const me = Object.create(person);

me.name = "Matthew"; // "name" is a property set on "me", but not on "person"
me.isHuman = true; // inherited properties can be overwritten

me.printIntroduction();
// output: "My name is Matthew. Am I human? true"

expand "me" object in console , expand __proto__ , you will see properties of person inherited to "me" 
*******************************************************************************************************

5.Create JavaScript Object using ES6 classes

class Vehicle {
  constructor(name, maker, engine) {
    this.name = name;
    this.maker =  maker;
    this.engine = engine;
  }
}
let bike1 = new Vehicle('Hayabusa', 'Suzuki', '1340cc');
let bike2 = new Vehicle('Ninja', 'Kawasaki', '998cc');
console.log(bike1.name);    //Output: Hayabusa
console.log(bike2.maker);   //Output: Kawasaki


******************************************************************************************************
6.

creating object without any inherited properties.
var d = Object.create(null);
output >> {} 
//expand object in console , __proto__ property not available
// __proto__ contains inherited properties from prototype


******************************************************************************************************
add singleton pattern too
2.
important : 
https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47
https://medium.com/@ayusharma.in/objects-writable-configurable-enumerable-365cdff6a408
--------

https://coderwall.com/p/p5cf5w/different-ways-of-creating-an-object-in-javascript
https://hackernoon.com/create-objects-in-javascript-10924cfa9fc7

------------------------
https://coderwall.com/p/j1khtg/javascript-difference-between-__proto__-and-prototype

https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47
