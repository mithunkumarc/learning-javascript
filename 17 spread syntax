Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments 
(for function calls) or elements (for array literals) are expected, 
or an object expression to be expanded in places where zero or more key-value (for object literals) are expected.

function sum(x, y, z){
    return x+y+z;
}

console.log(sum.apply(null, numbers))	//null - we are not sending any context object
//output : 6

//using spread syntax
const numbers = [1,2,3];
console.log(sum(...numbers));
//output : 6


Example 2 : applying spread syntax for new
When calling  a constructor with new , itâ€™s not possible to directly use an array and apply.
However, an array can be easily used with new thanks to spread syntax.


var dateFields = [1970, 0, 1]	//1 Jan 1970
var d = new Date(...dateFields);
undefined
console.log(d);
Output:  Thu Jan 01 1970 00:00:00 GMT+0530 (IST)


Example 3 ; copy an array

var arr = [1,2,3];
var arr2 = [...arr]; //like arr.slice()
arr2.push(4);
console.log(arr2);
Output : 1,2,3,4


Example 4 : a better way to concatenate arrays
Using concat function
Var arr1 = [1,2,3];
Var arr2 = [5,6,7];
 arr1 = arr1.concat(arr2);


Example 5 : merging objects
var obj1 = { foo: 'bar', x: 42 };
var obj2 = { foo: 'baz', y: 13 };

var clonedObj = { ...obj1 };
// Object { foo: "bar", x: 42 }

var mergedObj = { ...obj1, ...obj2 };
// Object { foo: "baz", x: 42, y: 13 }



Note: While the syntax of this function is almost identical to that of call(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.


