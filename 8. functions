function can be defined globally or function can be defined as a part of constructor function.
function inside constructor function represents behaviour of object.(sendMessage for mobile object)
constructor function acts like a prototype for objects created from it.
all properties of constructor function will be inherited to object, which are visible in __proto__ property.
*************************************************************************
Function example : 

function square(number){    
	return number * number;
}
square(5);
output >> 25

***********************************************************************
function can be used to change the state/property value of an object

function myFunc(theObject){
	theObject.make = 'Toyota';
}

var myCar = {make : 'Honda', model: 'Accord', year: 1998};
var x,y;

x = myCar.make;
myFunc(myCar);
y = myCar.make;
console.log('old',x);
console.log('new',y);
>> old Honda
>> new Toyota

**************************************************************************************************
Anonymous function : 

functions can also be created by a function expression.
Such a function can be anonymous; it does not have to have a name.

var square = function(number){return number*number};
var x = square(4);
console.log(x);
output >> 16

************************************************************************************************
passing function as argument : 

Function expressions are convenient when passing a function as an argument to another function. 
The following example shows a map function that should receive a function as an argument.

function map(f){
	for(let i = 0 ; i < 10; i ++){
    	console.log(f(i));
	}
}
function cube(number){
	return number * number * number;
}
map(cube);	//passing cube function as argument

output >> 
 0
 1
 8
 27
 64
 125
 216
 343
 512
 729

**************************************************************************************************
Nested functions and closures

The nested (inner) function is private to its containing (outer) function. It also forms a closure.

The inner function can be accessed only from statements in the outer function(outer function can just call innerfunction).
The inner function forms a closure: 
the inner function can use the arguments and variables of the outer function, 
while the outer function cannot use the arguments and variables of the inner function.




function addSquares(a,b){
	function square(x){
    	return x * x;
	}
	return square(a) + square(b);
}
let a = addSquares(2,3);
console.log(a); //output : 4+9 = 13

***********************************************************************************

default parameters : 
Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.

let add = function(a,b=0){		//if there is no value for b, zero will be initialized to variable b
	return a + b;
}

add(3,4);
output >> 7
add(4);
output >> 4


*****************************************************************************************

Rest parameters : 
The rest parameter syntax allows us to represent an indefinite number of arguments as an array.
In the example, we use the rest parameters to collect arguments from the second one to the end. 



function example(first,...theArgs){			//first will get first element, remaining goes to theArgs array
	console.log("first element ",first);
	console.log("remaining elements " , theArgs);
}
example(1,2,3,4,5);
output >> first element  1
output >> remaining elements Â [2, 3, 4, 5]

***************************************************************************************


construction function : all functions will have prototype object


function run(){}
>>> typeof run.prototype
>>> "object"


prototype is an object this object makes all the properties inherit from constructor funtion to objects.

NOte :

__proto__ (resides as an internal property of an object)
 is the actual object that is used in the lookup chain to resolve methods, etc. 


prototype (constructor functions by default get prototype object)
is the object that is used to build __proto__ when you create an object with new




**************************************************************************************************
this keyword cannot be accessed in nested functions 

var employee = {
    id:1,
    greet:function(){
   	 setTimeout(function(){console.log(this.id)}, 1000);
    }
};
console.log(employee.greet());

//undefined

//this keyword works in property funtion (greet()) but not in nested function (setTimeout)

**************************************************************************************

immediately invoked function expressions

declaring calling function at the same time : 

(function add(x,y){
	console.log(x+y);
})(10,20)

output : 30

cannot be reused again , you can skip the name 


(function (x,y){
	console.log(x+y);
})(10,20)

output >> 30
*******************************************************************************************
